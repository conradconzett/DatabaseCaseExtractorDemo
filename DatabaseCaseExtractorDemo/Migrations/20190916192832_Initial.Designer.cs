// <auto-generated />
using System;
using DatabaseCaseExtractorDemo.Base;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DatabaseCaseExtractorDemo.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20190916192832_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DatabaseCaseExtractorDemo.Model.AdditionalDataTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("NameAdditional");

                    b.HasKey("Id");

                    b.ToTable("AdditionalDataTables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88ddf83c-9eaf-4f4a-abb3-2f3277096d17"),
                            NameAdditional = "Test1"
                        },
                        new
                        {
                            Id = new Guid("64925c3c-8ceb-490b-8735-6fdcc1f47c96"),
                            NameAdditional = "Test2"
                        });
                });

            modelBuilder.Entity("DatabaseCaseExtractorDemo.Model.Table1", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateOne");

                    b.Property<int>("IntOne");

                    b.Property<string>("NameOne");

                    b.HasKey("Id");

                    b.ToTable("TableOnes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("79946776-b133-4d6e-892b-97d8dbbc26d8"),
                            DateOne = new DateTime(2019, 9, 16, 21, 28, 31, 241, DateTimeKind.Local).AddTicks(2262),
                            IntOne = 1,
                            NameOne = "A"
                        });
                });

            modelBuilder.Entity("DatabaseCaseExtractorDemo.Model.Table2", b =>
                {
                    b.Property<int>("Id");

                    b.Property<DateTime>("DateSecond");

                    b.Property<int>("IntSecond");

                    b.Property<string>("NameSecond");

                    b.Property<Guid>("TableOneId");

                    b.HasKey("Id");

                    b.HasIndex("TableOneId");

                    b.ToTable("TableSeconds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateSecond = new DateTime(2019, 9, 16, 21, 28, 31, 267, DateTimeKind.Local).AddTicks(4630),
                            IntSecond = 1,
                            NameSecond = "A",
                            TableOneId = new Guid("79946776-b133-4d6e-892b-97d8dbbc26d8")
                        },
                        new
                        {
                            Id = 2,
                            DateSecond = new DateTime(2019, 9, 16, 21, 28, 31, 267, DateTimeKind.Local).AddTicks(7004),
                            IntSecond = 1,
                            NameSecond = "A",
                            TableOneId = new Guid("79946776-b133-4d6e-892b-97d8dbbc26d8")
                        });
                });

            modelBuilder.Entity("DatabaseCaseExtractorDemo.Model.Table3", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateThird");

                    b.Property<int>("IntThird");

                    b.Property<string>("NameThird");

                    b.Property<int>("TableSecondId");

                    b.HasKey("Id");

                    b.HasIndex("TableSecondId");

                    b.ToTable("TableThirds");

                    b.HasData(
                        new
                        {
                            Id = "A",
                            DateThird = new DateTime(2019, 9, 16, 21, 28, 31, 267, DateTimeKind.Local).AddTicks(9286),
                            IntThird = 1,
                            NameThird = "A",
                            TableSecondId = 1
                        },
                        new
                        {
                            Id = "B",
                            DateThird = new DateTime(2019, 9, 16, 21, 28, 31, 268, DateTimeKind.Local).AddTicks(636),
                            IntThird = 1,
                            NameThird = "A",
                            TableSecondId = 1
                        },
                        new
                        {
                            Id = "C",
                            DateThird = new DateTime(2019, 9, 16, 21, 28, 31, 268, DateTimeKind.Local).AddTicks(675),
                            IntThird = 1,
                            NameThird = "A",
                            TableSecondId = 2
                        },
                        new
                        {
                            Id = "D",
                            DateThird = new DateTime(2019, 9, 16, 21, 28, 31, 268, DateTimeKind.Local).AddTicks(691),
                            IntThird = 1,
                            NameThird = "A",
                            TableSecondId = 2
                        });
                });

            modelBuilder.Entity("DatabaseCaseExtractorDemo.Model.Table2", b =>
                {
                    b.HasOne("DatabaseCaseExtractorDemo.Model.Table1", "TableOne")
                        .WithMany("TableSeconds")
                        .HasForeignKey("TableOneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DatabaseCaseExtractorDemo.Model.Table3", b =>
                {
                    b.HasOne("DatabaseCaseExtractorDemo.Model.Table2", "TableSecond")
                        .WithMany("TableThirds")
                        .HasForeignKey("TableSecondId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
